import os
import uuid
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, filters
import httpx

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ config.py
from config import BOT_TOKEN

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ Obsidian
OBSIDIAN_DIR = "/var/www/webdav/obsidian"
# –ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π
ATTACHMENTS_DIR = os.path.join(OBSIDIAN_DIR, "attachments")
# –°–æ–∑–¥–∞—ë–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(ATTACHMENTS_DIR):
    os.makedirs(ATTACHMENTS_DIR)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_ACTION, SELECT_NOTE, CREATE_NEW_NOTE = range(3)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤–æ—Å—Ç—å (—Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ), –∏ —è –¥–æ–±–∞–≤–ª—é –µ—ë –≤ –∑–∞–º–µ—Ç–∫–∏ Obsidian. üòä")
    return SELECT_ACTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def receive_news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    news_data = {"text": "", "images": []}
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
    if update.message.text:
        news_data["text"] = update.message.text
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if update.message.photo:
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)
        photo = update.message.photo[-1]
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_name = f"{uuid.uuid4().hex}.jpg"
        file_path = os.path.join(ATTACHMENTS_DIR, file_name)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo_file = await photo.get_file()
        await photo_file.download_to_drive(file_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        news_data["images"].append(f"![Image {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}](attachments/{file_name})")

    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not news_data["text"] and not news_data["images"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
        return SELECT_ACTION

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['news'] = news_data

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É", callback_data='existing')],
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É", callback_data='new')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç—å—é?", reply_markup=reply_markup)
    return SELECT_ACTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è)
async def select_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == 'new':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ (–±–µ–∑ .md):")
        return CREATE_NEW_NOTE
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–º–µ—Ç–æ–∫
        notes = [f for f in os.listdir(OBSIDIAN_DIR) if f.endswith('.md')]
        if not notes:
            await query.message.reply_text("–ù–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–º–µ—Ç–æ–∫. –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é!")
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ (–±–µ–∑ .md):")
            return CREATE_NEW_NOTE

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–º–µ–Ω–∞–º–∏ –∑–∞–º–µ—Ç–æ–∫
        keyboard = [[InlineKeyboardButton(note[:-3], callback_data=note)] for note in notes]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        return SELECT_NOTE

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
async def create_new_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    note_name = update.message.text.strip() + ".md"
    news_data = context.user_data['news']
    note_path = os.path.join(OBSIDIAN_DIR, note_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–º–µ—Ç–∫–∞
    if os.path.exists(note_path):
        await update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return CREATE_NEW_NOTE

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
    content = f"# {note_name[:-3]}\n\n"
    if news_data["text"]:
        content += f"{news_data['text']}\n"
    if news_data["images"]:
        content += "\n".join(news_data["images"]) + "\n"

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    with open(note_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    await update.message.reply_text(f"–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É: {note_name}")
    return ConversationHandler.END

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É
async def select_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    note_name = query.data
    news_data = context.user_data['news']
    note_path = os.path.join(OBSIDIAN_DIR, note_name)

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    content = ""
    if news_data["text"]:
        content += f"\n{news_data['text']}\n"
    if news_data["images"]:
        content += "\n".join(news_data["images"]) + "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–æ–Ω–µ—Ü –∑–∞–º–µ—Ç–∫–∏
    with open(note_path, 'a', encoding='utf-8') as f:
        f.write(content)
    
    await query.message.reply_text(f"–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∑–∞–º–µ—Ç–∫—É: {note_name}")
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main() -> None:
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP-–∫–ª–∏–µ–Ω—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    http_client = httpx.AsyncClient(
        timeout=httpx.Timeout(30.0),  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
        limits=httpx.Limits(max_connections=100, max_keepalive_connections=20),
        transport=httpx.AsyncHTTPTransport(retries=3)  # 3 –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    )

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º HTTP-–∫–ª–∏–µ–Ω—Ç–æ–º
    application = Application.builder().token(BOT_TOKEN).http_client(http_client).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.TEXT | filters.PHOTO & ~filters.COMMAND, receive_news)
        ],
        states={
            SELECT_ACTION: [CallbackQueryHandler(select_action)],
            SELECT_NOTE: [CallbackQueryHandler(select_note)],
            CREATE_NEW_NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_new_note)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()